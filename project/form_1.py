# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import xml.etree.ElementTree as elt
from magic import from_file
from PyQt5 import QtCore, QtGui, QtWidgets
from os import stat,getcwd,walk,rename
from os.path import basename,splitext,exists,join,dirname
from ui.gen_key_dialog import Ui_Dialog
from ui.add_file_dialog import File_ui_add
from time import localtime,strftime
from ui.enc_win import Ui_encDialog
from ui.dec_win import Ui_decDialog
from ui.secure_win import Ui_secDialog

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setObjectName("MainWindow")
        self.setWindowModality(QtCore.Qt.NonModal)
        self.resize(902, 727)
        icon_window = QtGui.QIcon()
        icon_window.addPixmap(QtGui.QPixmap("icons/main.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon_window)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setSizeIncrement(QtCore.QSize(0, 0))
        self.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.setFocusPolicy(QtCore.Qt.NoFocus)
        self.setAutoFillBackground(False)
        self.setStyleSheet("")
        self.setIconSize(QtCore.QSize(40, 40))
        self.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setSizeIncrement(QtCore.QSize(100, 0))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalWidget = QtWidgets.QWidget(self.tab)
        self.verticalWidget.setEnabled(True)
        self.verticalWidget.setObjectName("verticalWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalWidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.treeWidget = QtWidgets.QTreeWidget(self.verticalWidget)
        self.treeWidget.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.treeWidget.setTabKeyNavigation(True)
        self.treeWidget.setDragDropMode(QtWidgets.QAbstractItemView.NoDragDrop)
        self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.treeWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.treeWidget.setTextElideMode(QtCore.Qt.ElideRight)
        self.treeWidget.setIndentation(20)
        self.treeWidget.setUniformRowHeights(False)
        self.treeWidget.setAllColumnsShowFocus(True)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.setColumnWidth(0,500)
        self.treeWidget.setColumnWidth(2,100)

        self.treeWidget.header().setCascadingSectionResizes(False)
        self.treeWidget.header().setSortIndicatorShown(True)
        self.treeWidget.header().setStretchLastSection(True)

        self.verticalLayout_2.addWidget(self.treeWidget)
        self.verticalLayout_4.addWidget(self.verticalWidget)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalWidget1 = QtWidgets.QWidget(self.tab_2)
        self.verticalWidget1.setEnabled(True)
        self.verticalWidget1.setObjectName("verticalWidget1")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalWidget1)
        self.verticalLayout_6.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.treeWidget_2 = QtWidgets.QTreeWidget(self.verticalWidget1)
        self.treeWidget_2.setObjectName("treeWidget_2")
        self.treeWidget_2.setColumnWidth(0,500)

        self.treeWidget_2.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.treeWidget_2.setTabKeyNavigation(True)
        self.treeWidget_2.setDragDropMode(QtWidgets.QAbstractItemView.NoDragDrop)
        self.treeWidget_2.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.treeWidget_2.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.treeWidget_2.setTextElideMode(QtCore.Qt.ElideRight)
        self.treeWidget_2.setIndentation(20)
        self.treeWidget_2.setUniformRowHeights(False)
        self.treeWidget_2.setAllColumnsShowFocus(True)
        #self.treeWidget_2.resizeColumnToContents(0)
        self.treeWidget_2.header().setCascadingSectionResizes(False)
        self.treeWidget_2.header().setSortIndicatorShown(True)
        self.treeWidget_2.header().setStretchLastSection(True)
        self.verticalLayout_6.addWidget(self.treeWidget_2)
        self.verticalLayout_5.addWidget(self.verticalWidget1)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalWidget2 = QtWidgets.QWidget(self.tab_3)
        self.verticalWidget2.setObjectName("verticalWidget2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalWidget2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.treeWidget_3 = QtWidgets.QTreeWidget(self.verticalWidget2)
        self.treeWidget_3.setObjectName("treeWidget_3")
        self.verticalLayout.addWidget(self.treeWidget_3)
        self.verticalLayout_3.addWidget(self.verticalWidget2)
        self.tabWidget.addTab(self.tab_3, "")
        self.verticalLayout_9.addWidget(self.tabWidget)
        self.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setObjectName("toolBar")
        self.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 902, 30))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSetttings = QtWidgets.QMenu(self.menubar)
        self.menuSetttings.setObjectName("menuSetttings")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.setMenuBar(self.menubar)
        self.actionFolder = QtWidgets.QAction(self)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFolder.setIcon(icon)
        self.actionFolder.setObjectName("actionFolder")
        self.actionEncrypt = QtWidgets.QAction(self)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/encrypt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEncrypt.setIcon(icon1)
        self.actionEncrypt.setObjectName("actionEncrypt")
        self.actionDecrypt = QtWidgets.QAction(self)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/decrypt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDecrypt.setIcon(icon2)
        self.actionDecrypt.setObjectName("actionDecrypt")
        self.actionAdd = QtWidgets.QAction(self)

        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/add.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd.setIcon(icon3)
        self.actionAdd.setObjectName("actionAdd")
        self.actionhelp = QtWidgets.QAction(self)
        self.actionhelp.setObjectName("actionhelp")
        self.actionExit = QtWidgets.QAction(self)
        self.actionExit.setObjectName("actionExit")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon6)
        self.actionLanguage = QtWidgets.QAction(self)
        self.actionLanguage.setObjectName("actionLanguage")
        self.actionSecure = QtWidgets.QAction(self)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/brush.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSecure.setIcon(icon4)
        self.actionSecure.setObjectName("actionSecure")
        self.actionGenerate_key = QtWidgets.QAction(self)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/gen_key.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGenerate_key.setIcon(icon5)
        self.actionGenerate_key.setObjectName("actionGenerate_key")




        self.toolBar.addAction(self.actionAdd)
        self.toolBar.addAction(self.actionEncrypt)
        self.toolBar.addAction(self.actionDecrypt)
        self.toolBar.addAction(self.actionGenerate_key)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionFolder)
        self.toolBar.addAction(self.actionSecure)
        self.menuFile.addAction(self.actionAdd)
        self.menuFile.addAction(self.actionEncrypt)
        self.menuFile.addAction(self.actionDecrypt)
        self.menuFile.addAction(self.actionFolder)
        self.menuFile.addAction(self.actionSecure)
        self.menuFile.addAction(self.actionExit)
        self.menuSetttings.addAction(self.actionLanguage)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSetttings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.actionDelete = QtWidgets.QAction(self)
        self.actionClear = QtWidgets.QAction(self)
        self.actionSelect = QtWidgets.QAction(self)
        self.actionSelectAll = QtWidgets.QAction(self)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDelete.setIcon(icon6)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons/clear.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClear.setIcon(icon7)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icons/selectall.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSelectAll.setIcon(icon8)
        self.retranslateUi()
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.Files_enc = list()
        self.Files_dec = list()
        self.center()

    def center(self):
        screen = QtWidgets.QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width() - size.width()) // 2, (screen.height() - size.height()) // 2)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "FaiCrypto"))
        self.treeWidget.setSortingEnabled(True)
        self.treeWidget_2.setSortingEnabled(True)
        self.treeWidget_3.setSortingEnabled(True)

        self.treeWidget.headerItem().setText(0, _translate("MainWindow", "File"))
        self.treeWidget.headerItem().setText(1, _translate("MainWindow", "size"))
        self.treeWidget.headerItem().setText(2, _translate("MainWindow", "type"))
        self.treeWidget.headerItem().setText(3, _translate("MainWindow", "Time"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)

        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Files"))
        self.treeWidget_2.headerItem().setText(0, _translate("MainWindow", "File"))
        self.treeWidget_2.headerItem().setText(1, _translate("MainWindow", "Size"))
        self.treeWidget_2.headerItem().setText(2, _translate("MainWindow", "Type"))
        self.treeWidget_2.headerItem().setText(3, _translate("MainWindow", "Time"))

        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Encrypted Files"))
        self.treeWidget_3.headerItem().setText(0, _translate("MainWindow", "Folder"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Secured Folders"))
        self.statusbar.setStatusTip(_translate("MainWindow", "hello"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSetttings.setTitle(_translate("MainWindow", "Setttings"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionDelete.setText(_translate("MainWindow", "delete"))
        self.actionClear.setText(_translate("MainWindow", "Clear"))
        self.actionSelect.setText(_translate("MainWindow", "Select"))
        self.actionSelectAll.setText(_translate("MainWindow", "Select All"))
        self.actionFolder.setText(_translate("MainWindow", "Add Folder"))
        self.actionFolder.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionEncrypt.setText(_translate("MainWindow", "Encrypt"))
        self.actionEncrypt.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionDecrypt.setText(_translate("MainWindow", "Decrypt"))
        self.actionDecrypt.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionAdd.setText(_translate("MainWindow", "Add"))
        self.actionAdd.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionhelp.setText(_translate("MainWindow", "help"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionLanguage.setText(_translate("MainWindow", "Language"))
        self.actionSecure.setText(_translate("MainWindow", "Secure"))
        self.actionSecure.setToolTip(_translate("MainWindow", "Secure"))
        self.actionGenerate_key.setText(_translate("MainWindow", "Generate_key"))
        self.actionGenerate_key.setToolTip(_translate("MainWindow", "generate_key"))
        self.prepare_actions()
    def prepare_folder_widget(self):
        self.tree = elt.parse('./data/conf.xml')
        self.root = self.tree.getroot()
        for element in self.root:
            item = QtWidgets.QTreeWidgetItem(self.treeWidget_3)
            item.setText(0, element[0].text)
            item.setText(1,element[1].text)
            item.setText(2,element[2].text)
            self.treeWidget_3.insertTopLevelItem(self.last_item_fold+1, item)
            self.last_item_fold += 1

    def write_xmlUpdate(self,p,n,s):
        child = elt.Element('dir')
        item1 = elt.Element('path')
        item2 = elt.Element('currentname')
        item3 = elt.Element('status')
        item1.text = p ; item2.text = n ; item3.text =s
        child.append(item1); child.append(item2) ; child.append(item3)
        self.root.append(child)
        self.tree.write('./data/conf.xml')
    def prepare_actions(self):
        self.last_item_enc = 0
        self.last_item_dec = 0
        self.last_item_fold = 0
        self.actionExit.triggered.connect(self.close)
        self.actionAdd.triggered.connect(self.behav_add)
        self.actionFolder.triggered.connect(self.behav_Folder)
        self.tabWidget.currentChanged.connect(self.bahav_tab)
        self.actionGenerate_key.triggered.connect(self.behav_key)
        self.actionSecure.triggered.connect(self.behav_secure)
        self.actionDelete.triggered.connect(self.clear)
        self.actionClear.triggered.connect(self.clearAll)
        #self.actionSelect.triggered.connect(self.select)
        self.actionSelectAll.triggered.connect(self.selectAll)
        self.actionEncrypt.triggered.connect(self.behav_encrypt)
        self.actionDecrypt.triggered.connect(self.behav_decrypt)
        self.prepare_folder_widget()

    def getsize(self,file):
        sz = stat(file).st_size
        if sz >= 1024 * 1024 * 1024:
            return '{} GB'.format(sz // (1024 * 1024 * 1204))

        elif sz >= 1024 * 1024:
            return '{} MB'.format(sz // (1024*1024))

        elif sz >= 1024:
            return '{} KB'.format(sz // 1024)
        else:
            return '{} Bytes'.format(sz)

    def contextMenuEvent(self,event):
        if self.tabWidget.currentIndex() != 2:
            menu = QtWidgets.QMenu(self)
            menu.addAction(self.actionDelete)
            menu.addAction(self.actionClear)
           # menu.addAction(self.actionSelect)
            menu.addAction(self.actionSelectAll)

            menu.exec_(self.mapToGlobal(event.pos()))

    def select(self):
        pass

    def selectAll(self):
        selected = [self.treeWidget, self.treeWidget_2, self.treeWidget_3]
        selected[self.tabWidget.currentIndex()].selectAll()

    def clear(self):
        selected = [self.treeWidget, self.treeWidget_2, self.treeWidget_3]
        for i in selected[self.tabWidget.currentIndex()].selectedItems():
            selected[self.tabWidget.currentIndex()].takeTopLevelItem(selected[self.tabWidget.currentIndex()].indexOfTopLevelItem(i))
            if self.tabWidget.currentIndex() == 0:
                self.Files_enc.remove(i.text(4))
            else :
                self.Files_dec.remove(i.text(4))


    def clearAll(self):
        selected = [self.treeWidget, self.treeWidget_2, self.treeWidget_3]
        selected[self.tabWidget.currentIndex()].clear()
        if self.tabWidget.currentIndex() == 0:
            self.Files_enc = []
        else:
            self.Files_dec = []

    def enc_tab_action(self):
        self.actionDecrypt.setEnabled(0)
        self.actionEncrypt.setEnabled(1)
        self.actionFolder.setEnabled(0)
        self.actionSecure.setEnabled(0)
        self.actionAdd.setEnabled(1)

    def dec_tab_action(self):
        self.actionDecrypt.setEnabled(1)
        self.actionEncrypt.setEnabled(0)
        self.actionFolder.setEnabled(0)
        self.actionSecure.setEnabled(0)
        self.actionAdd.setEnabled(1)

    def Fold_tab_action(self):
        self.actionAdd.setEnabled(0)
        self.actionDecrypt.setEnabled(0)
        self.actionEncrypt.setEnabled(0)
        self.actionFolder.setEnabled(1)
        self.actionSecure.setEnabled(1)

    def behav_key(self):
        key_dialog=Ui_Dialog(self)
        key_dialog.show()

    def bahav_tab(self):
        slots = [self.enc_tab_action,self.dec_tab_action,self.Fold_tab_action]
        slots[self.tabWidget.currentIndex()]()

    def behav_Folder(self):
        self.last_item_fold = 0
        file_dialog = File_ui_add(self)
        file_dialog.setFileMode(File_ui_add.Directory)
        dir = file_dialog.getExistingDirectory(directory=getcwd())
        if dir:
            item = QtWidgets.QTreeWidgetItem(self.treeWidget_3)
            item.setText(0, dir)
            item.setText(1,dir)
            item.setText(2,'open')
            self.treeWidget_3.insertTopLevelItem(self.last_item_fold+1, item)
            self.write_xmlUpdate(dir,dir,'open')
            self.last_item_fold += 1
    def behav_add(self):
        if self.tabWidget.currentIndex() == 0:
            files=File_ui_add(self).getOpenFileNames(directory=getcwd())
            for i,f in enumerate(files[0]):
                if f not in self.Files_enc:
                    item = QtWidgets.QTreeWidgetItem(self.treeWidget)
                    item.setText(0,basename(f))
                    item.setText(1,'    '+self.getsize(f))
                    item.setText(2,'    '+from_file(f,mime=True).split('/')[0])
                    item.setText(3,'    '+strftime('%H:%M',localtime()))
                    item.setText(4,f)
                    self.Files_enc.append(f)
                    self.treeWidget.insertTopLevelItem(self.last_item_enc,item)
                    self.last_item_enc += 1

        elif self.tabWidget.currentIndex() == 1:
            files = File_ui_add(self).getOpenFileNames(directory=getcwd(),filter="Fai Encrypted Files (*.mfai *.fai) ")
            for i, f in enumerate(files[0]):
                if f not in self.Files_dec:
                    item = QtWidgets.QTreeWidgetItem(self.treeWidget_2)
                    item.setText(0, basename(f))
                    item.setText(1, '    '+self.getsize(f))
                    item.setText(2, 'Encrypted File')
                    item.setText(3,'    '+strftime('%H:%M',localtime()))
                    item.setText(4,f)
                    self.Files_dec.append(f)
                    self.treeWidget_2.insertTopLevelItem(self.last_item_dec, item)
                    self.last_item_dec += 1

    def behav_encrypt(self):
        files_selected = []
        if not self.treeWidget.selectedItems():
            msg = QtWidgets.QMessageBox(self)
            msg.setText("No file selected")
            msg.setWindowTitle("file selected error")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.buttonClicked.connect(msg.close)
            msg.setModal(True)
            msg.show()
            return

        for i in self.treeWidget.selectedItems():
            if not exists(i.text(4)):
                msg = QtWidgets.QMessageBox(self)
                msg.setText("file {} not found".format(i.text(0)))
                msg.setWindowTitle("file open error")
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                msg.buttonClicked.connect(msg.close)
                msg.setModal(True)
                msg.show()
                return
            files_selected.append(i.text(4))
        enc_dialog = Ui_encDialog(self,files_selected)
        enc_dialog.show()


    def behav_decrypt(self):
        files_selected = []
        if not self.treeWidget_2.selectedItems():
            msg = QtWidgets.QMessageBox(self)
            msg.setText("No file selected")
            msg.setWindowTitle("file selected error")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.buttonClicked.connect(msg.close)
            msg.setModal(True)
            msg.show()
            return

        for i in self.treeWidget_2.selectedItems():
            if not exists(i.text(4)):
                msg = QtWidgets.QMessageBox(self)
                msg.setText("file {} not found".format(i.text(0)))
                msg.setWindowTitle("file open error")
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                msg.buttonClicked.connect(msg.close)
                msg.setModal(True)
                msg.show()
                return
            files_selected.append(i.text(4))


        check_same_type = splitext(files_selected[0])[1]
        for i in files_selected:
            if splitext(i)[1] != check_same_type:
                    msg = QtWidgets.QMessageBox(self)
                    msg.setText("files with different encryption types are selected")
                    msg.setWindowTitle("files selected encryption error")
                    msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                    msg.buttonClicked.connect(msg.close)
                    msg.setModal(True)
                    msg.show()
                    return
        dec_dialog = Ui_decDialog(self,files_selected)
        dec_dialog.show()

    def behav_secure(self):
        files = []
        if not self.treeWidget_3.selectedItems():
            msg = QtWidgets.QMessageBox(self)
            msg.setText("No folder selected")
            msg.setWindowTitle("folder selected error")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.buttonClicked.connect(msg.close)
            msg.setModal(True)
            msg.show()
            return
        currentname = self.treeWidget_3.selectedItems()[0].text(1)
        stat = self.treeWidget_3.selectedItems()[0].text(2)
        if stat =='open':
            sec_dial = Ui_secDialog(self, currentname, 1)
            sec_dial.show()
        else:
            sec_dial = Ui_secDialog(self, currentname, 0)
            sec_dial.show()




       # print(files)

from qt_material import apply_stylesheet
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    apply_stylesheet(app, theme='dark_blue.xml')
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
